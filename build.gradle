buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'signing'
    id 'checkstyle'
    id 'maven-publish'
    id 'com.github.spotbugs' version '4.6.0'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.6.10'
}

description = "Rhizome client libraries"
group = "com.openlattice"

/*
 * This block must remain above the apply block as it controls publishing"
 */
ext.projectName = "rhizome-client"
ext.scmUrl = 'scm:git:https://github.com/geekbeast/rhizome-client.git'
ext.connectionUrl = 'scm:git:https://github.com/geekbeast/rhizome-client.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/geekbeast/rhizome-client.git'

apply from: "https://raw.githubusercontent.com/openlattice/openlattice/main/gradles/openlattice.gradle"

/**
 * The reason we use source and target compatability instead of toolchain is that toolchain forces use of the --release
 * flag. This flag prevents exports of some commonly used internal java apis in order to enforce compliance with public
 * api surface of that particular release.  The source and target compatibility settings without the --release flag
 * instruct the compiler to generate compatible byte code with that version at the risk of allowing the use of
 * potentially unsupported APIs on earlier versions. (i.e compiler 17, target/source 11, will create bytecode that
 * references an 17 API that isn't available on jdk 11).
 */
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

checkstyle {
    toolVersion = '7.4'
    showViolations = false
    config project.resources.text.fromUri('https://raw.githubusercontent.com/openlattice/openlattice/develop/gradles/checkstyle.xml')
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugs {
    reportLevel = 'high'
    toolVersion = "${spotbugs_annotations_version}"
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

test {
    ignoreFailures = true
}

jacoco {
    toolVersion = "0.8.2"
}

dependencies {
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugs_version}"
    compileOnly "net.jcip:jcip-annotations:${jcip_version}"
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"
    testCompileOnly "net.jcip:jcip-annotations:${jcip_version}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"

    implementation group: "org.slf4j", name: "slf4j-api", version: "${slf4j_version}"

    /*
     * @Inject and @Nullable support
     */
    api "javax.inject:javax.inject:${javax_inject_version}"

    api "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_version}"
    api "com.esotericsoftware:kryo-shaded:${kryo_shaded_version}"
    api "com.esotericsoftware:minlog:${minlog_version}"
    api "com.esotericsoftware:reflectasm:${reflectasm_version}"
    api "org.objenesis:objenesis:${objenesis_version}"

    api group: 'com.amazonaws', name: 'aws-java-sdk-ec2', version: "$aws_java_sdk_version"
    api "com.amazonaws:aws-java-sdk-s3:$aws_java_sdk_version"

    api "org.apache.commons:commons-lang3:${commonsLang_version}"
    api "commons-io:commons-io:${commonsio_version}"

    api "com.google.guava:guava:${guava_version}"
    api "org.apache.olingo:odata-commons-api:${odata_version}"
    api "org.apache.olingo:odata-commons-core:${odata_version}"
    api "org.apache.olingo:odata-server-api:${odata_version}"
    api "org.apache.olingo:odata-server-core:${odata_version}"

    api "com.squareup.retrofit2:retrofit:${retrofit2_version}"

    api "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
    api "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    api "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jackson_version}"
    api "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jackson_version}"
    api "com.fasterxml.jackson.module:jackson-module-afterburner:${jackson_version}"
    api "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson_version}"
    api "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_version}"
    api "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jackson_version}"
    api "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson_version}"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_version}"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jackson_version}"
    api "com.fasterxml.jackson.module:jackson-module-kotlin:${jackson_version}"
    api "org.yaml:snakeyaml:${snakeyaml_version}"

    api "com.auth0:java-jwt:${auth0_java_jwt_version}"
    api "com.auth0:jwks-rsa:${auth0_jwks_rsa_version}"
    api "com.auth0:auth0:${project.auth0_version}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    /*
     * TESTING
     */
    testImplementation "junit:junit:${junit_version}"
    testImplementation("org.mockito:mockito-all:${mockito_version}") {
        exclude module: 'hamcrest'
        exclude module: 'hamcrest-core'
    }
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += '-Xjvm-default=compatibility'
    }
}